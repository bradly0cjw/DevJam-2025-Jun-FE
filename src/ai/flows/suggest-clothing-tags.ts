// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A flow that suggests descriptive tags for clothing items based on an image.
 *
 * - suggestClothingTags - A function that handles the clothing tag suggestion process.
 * - SuggestClothingTagsInput - The input type for the suggestClothingTags function.
 * - SuggestClothingTagsOutput - The return type for the suggestClothingTags function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestClothingTagsInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      'A photo of the clothing item, as a data URI that must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.' // Fixed the typo here
    ),
});
export type SuggestClothingTagsInput = z.infer<typeof SuggestClothingTagsInputSchema>;

const SuggestClothingTagsOutputSchema = z.object({
  tags: z
    .array(z.string())
    .describe('An array of descriptive tags for the clothing item.'),
});
export type SuggestClothingTagsOutput = z.infer<typeof SuggestClothingTagsOutputSchema>;

export async function suggestClothingTags(input: SuggestClothingTagsInput): Promise<SuggestClothingTagsOutput> {
  return suggestClothingTagsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestClothingTagsPrompt',
  input: {schema: SuggestClothingTagsInputSchema},
  output: {schema: SuggestClothingTagsOutputSchema},
  prompt: `You are an AI assistant that specializes in tagging clothing items.  Based on the image provided, generate a list of descriptive tags appropriate for the item. Only return the tags in JSON format.

Image: {{media url=photoDataUri}}`,
});

const suggestClothingTagsFlow = ai.defineFlow(
  {
    name: 'suggestClothingTagsFlow',
    inputSchema: SuggestClothingTagsInputSchema,
    outputSchema: SuggestClothingTagsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
